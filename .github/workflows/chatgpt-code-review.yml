name: ChatGPT Code Review

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  review_code:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio
        uses: actions/checkout@v2

      - name: Instalar OpenAI y Requests
        run: pip install --upgrade openai requests

      - name: Revisar código con ChatGPT
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          python -c "
          import openai
          import requests
          import os
          import base64
          import sys

          def get_file_content(repo_owner, repo_name, file_path, token):
              url = f'https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{file_path}'
              headers = {'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}
              response = requests.get(url, headers=headers)

              if response.status_code == 200:
                  file_data = response.json()
                  if 'content' in file_data:
                      return base64.b64decode(file_data['content']).decode('utf-8')
                  else:
                      print('🔴 Error: El archivo no tiene contenido.')
              else:
                  print(f'🔴 Error al obtener archivo desde GitHub API: {response.status_code}')
                  print(response.text)
              return None

          def review_code_with_chatgpt(code, api_key):
              client = openai.OpenAI(api_key=api_key)
              response = client.chat.completions.create(
                  model='gpt-4',
                  messages=[
                      {'role': 'system', 'content': 'Eres un experto en revisión de código en Python.'},
                      {'role': 'user', 'content': f'Revisa este código y sugiere mejoras:\n\n{code}'}
                  ]
              )
              return response.choices[0].message.content

          openai_api_key = os.getenv('OPENAI_API_KEY')
          github_token = os.getenv('GITHUB_ACCESS_TOKEN')
          repo_owner = 'ajs654345'
          repo_name = 'Backtestin-bolt'
          file_path = 'test.py'

          if not openai_api_key:
              print('🔴 ERROR: La clave de API de OpenAI no está configurada en los secretos.')
              sys.exit(1)

          code = get_file_content(repo_owner, repo_name, file_path, github_token)
          if code is None:
              sys.exit(1)

          review = review_code_with_chatgpt(code, openai_api_key)
          print('🔍 Resultado de la revisión de código:')
          print(review)
          "
